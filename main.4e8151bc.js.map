{"version":3,"sources":["virtualdom/createElement.js","virtualdom/render.js","virtualdom/mount.js","virtualdom/diff.js","main.js"],"names":["tagName","attrs","children","render","renderElement","$element","document","createElement","Object","entries","k","v","setAttribute","child","$child","appendChild","virtualNode","createTextNode","$node","$target","replaceWith","diff","zip","xs","ys","zipped","i","Math","min","length","push","diffAttributes","oldAttributes","newAttributes","patches","key","value","removeAttribute","patch","diffChildren","oldVirtualChildren","newVirtualChildren","childPatches","oldVirtualChild","newVirtualChild","additionalPatches","slice","additionalVirtualChild","$parent","childNodes","virtualOldNode","virtualNewNode","undefined","remove","tagname","$newNode","patchAttributes","patchChildren","createVirtualApp","count","id","dataCount","src","mewFlip","virtualApp","$app","$rootElement","mount","getElementById","setInterval","virtualNewApp"],"mappings":"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","file":"main.4e8151bc.js","sourceRoot":"../src","sourcesContent":["export default (tagName, { attrs = {}, children = [] } = {}) => {\n  return {\n    tagName,\n    attrs: attrs,\n    children: children,\n  };\n};\n","const renderElement = ({ tagName, attrs, children }) => {\n  const $element = document.createElement(tagName);\n\n  // sets attributes\n  for (const [k, v] of Object.entries(attrs)) {\n    $element.setAttribute(k, v);\n  }\n\n  // sets children(array of virtual doms)\n  for (const child of children) {\n    const $child = render(child);\n    $element.appendChild($child);\n  }\n\n  return $element;\n};\n\nconst render = (virtualNode) => {\n  if (typeof virtualNode === \"string\") {\n    return document.createTextNode(virtualNode);\n  }\n\n  return renderElement(virtualNode);\n};\n\nexport default render;\n","export default ($node, $target) => {\n  $target.replaceWith($node);\n  return $node;\n};\n","import render from \"./render\";\n\nconst zip = (xs, ys) => {\n  const zipped = [];\n  for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n    zipped.push([xs[i], ys[i]]);\n  }\n  return zipped;\n};\n\nconst diffAttributes = (oldAttributes, newAttributes) => {\n  const patches = [];\n\n  // sets new attributes\n  for (const [key, value] of Object.entries(newAttributes)) {\n    patches.push(($node) => {\n      $node.setAttribute(key, value);\n      return $node;\n    });\n  }\n\n  // removes old attributes\n  for (const key in oldAttributes) {\n    if (!(key in newAttributes)) {\n      patches.push(($node) => {\n        $node.removeAttribute(key);\n        return $node;\n      });\n    }\n  }\n\n  return ($node) => {\n    for (const patch of patches) {\n      patch($node);\n    }\n  };\n};\n\nconst diffChildren = (oldVirtualChildren, newVirtualChildren) => {\n  const childPatches = [];\n  for (const [oldVirtualChild, newVirtualChild] of zip(\n    oldVirtualChildren,\n    newVirtualChildren\n  )) {\n    childPatches.push(diff(oldVirtualChild, newVirtualChild));\n  }\n\n  const additionalPatches = [];\n  for (const additionalVirtualChild of newVirtualChildren.slice(\n    oldVirtualChildren.length\n  )) {\n    additionalPatches.push(($node) => {\n      $node.appendChild(render(additionalVirtualChild));\n      return $node;\n    });\n  }\n\n  return ($parent) => {\n    for (const [patch, child] of zip(childPatches, $parent.childNodes)) {\n      patch(child);\n    }\n    for (const patch of additionalPatches) {\n      patch($parent);\n    }\n\n    return $parent;\n  };\n};\n\nconst diff = (virtualOldNode, virtualNewNode) => {\n  if (virtualNewNode === undefined) {\n    return ($node) => {\n      $node.remove();\n      return undefined;\n    };\n  }\n\n  if (virtualOldNode.tagname !== virtualNewNode.tagname) {\n    return ($node) => {\n      const $newNode = render(virtualNewNode);\n      $node.replaceWith($newNode);\n      return $newNode;\n    };\n  }\n\n  if (\n    typeof virtualOldNode === \"string\" ||\n    typeof virtualNewNode === \"string\"\n  ) {\n    if (virtualOldNode !== virtualNewNode) {\n      return ($node) => {\n        const $newNode = render(virtualNewNode);\n        $node.replaceWith($newNode);\n        return $newNode;\n      };\n    } else {\n      return ($node) => undefined;\n    }\n  }\n\n  const patchAttributes = diffAttributes(\n    virtualOldNode.attrs,\n    virtualNewNode.attrs\n  );\n  const patchChildren = diffChildren(\n    virtualOldNode.children,\n    virtualNewNode.children\n  );\n\n  return ($node) => {\n    patchAttributes($node);\n    patchChildren($node);\n    return $node;\n  };\n};\n\nexport default diff;\n","import createElement from \"./virtualdom/createElement\";\nimport render from \"./virtualdom/render\";\nimport mount from \"./virtualdom/mount\";\nimport diff from \"./virtualdom/diff\";\nimport mewFlip from \"./assets/mewFlip.webp\";\nimport \"./main.css\";\n\nconst createVirtualApp = (count) =>\n  createElement(\"div\", {\n    attrs: {\n      id: \"app\",\n      dataCount: count,\n    },\n    children: [\n      createElement(\"img\", {\n        attrs: {\n          id: \"mew\",\n          src: mewFlip,\n        },\n      }),\n      `🍥 ✨ 뮤가 ` + (count + 1) + `번째 도는중  ✨ 🍥`,\n    ],\n  });\n\nlet count = 0;\n\nlet virtualApp = createVirtualApp(count);\nconst $app = render(virtualApp);\n\nlet $rootElement = mount($app, document.getElementById(\"app\"));\n\nsetInterval(() => {\n  count++;\n  const virtualNewApp = createVirtualApp(count);\n  const patch = diff(virtualApp, virtualNewApp);\n  $rootElement = patch($rootElement);\n  virtualApp = virtualNewApp;\n}, 2000);\n\nmount($rootElement, document.getElementById(\"app\"));\n"]}